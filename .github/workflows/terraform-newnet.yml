name: 'Terraform-Network creation uat'

on:
  push:
    branches:
      - main
    paths:
      - 'devops/env/network/*.tf'
      - '.github/workflows/terraform-newnet.yml'

permissions:
  contents: read

jobs:
  terraform:
    name: 'Terraform Network creation'
    runs-on: ubuntu-latest
    environment: uat

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      
    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      working-directory: devops/env/network
      run: |
          terraform init \
          -backend-config=access_key=${{ secrets.BACKEND_STORAGE_ACCOUNT_ACCESS_KEY }} \
          -backend-config=key="${{ vars.TF_NET_STATEFILE }}"
          
    - name: Setup Terraform variables
      working-directory: devops/env/network
      id: vars
      run: |-
          cat > terraform.tfvars <<EOF
          confluent_cloud_api_key = "${{ secrets.CONFLUENT_CLOUD_API_KEY }}"
          confluent_cloud_api_secret = "${{ secrets.CONFLUENT_CLOUD_API_SECRET }}"
          aws_account_id = "${{ vars.AWS_ACCOUNT_ID }}"
          network_name  = "${{ vars.NETWORK_NAME }}"
          network_cloud = "${{ vars.NETWORK_CLOUD }}"
          network_region = "${{ vars.NETWORK_REGION }}"
          environment = "env-yg5x9p"
          subnets_to_privatelink = {
            "use1-az1" = "subnet-0620ef8e739b28eaa",
            "use1-az2" = "subnet-013cb394df5b1c447",
            "use1-az4" = "subnet-0de2aacb446c91fc0",
          }
          
          EOF
          cat terraform.tfvars
          
    # Checks that all Terraform configuration files adhere to a canonical format

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      working-directory: devops/env/network
      run: terraform plan -var-file=terraform.tfvars

      # On push to "main", build or change infrastructure according to Terraform configuration file
      # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    - name: Terraform Apply
      working-directory: devops/env/network
      run: terraform apply -auto-approve -var-file=terraform.tfvars
